@model IEnumerable<AIM_Inventory.Models.DeviceModel>

@{
    ViewData["Title"] = "Device List";
}

@*<h1>@ViewData["Title"]</h1>*@


<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            @* Show create device button. *@
            <a asp-action="Create" type="button" class="btn btn-secondary">Create New Device</a>
            @* Show search options. *@
            Search for:
            <input type="text" name="search" value="@ViewData["SearchString"]" />
            <input type="submit" value="Search" class="btn btn-secondary" /> |
            @* Show go back to full list option. *@
            <a asp-action="Index" type="button" class="btn btn-outline-secondary">Return to List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Friendly_Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IP_Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Serial_Number)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Model_Number)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MAC_Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Operating_System)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Notes)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date_Purchase)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date_Retire)
            </th>
            <th>
                @* Show page navigation. *@
                <ul class="pagination justify-content-end">
                    @* Only display action link for 'Previous Page'' when the controller specifies. Include a search string if there is one. *@
                    @if (ViewData["LastPageButtonShown"].ToString() == "True")
                    {
                        <li class="page-item">@Html.ActionLink("<", "Index", new { search = ViewData["SearchString"], page = ViewData["LastPage"] }, new { @class = "page-link" })</li>
                    }
                    else
                    {
                        <li class="page-item disabled"><a class="page-link">&lt</a></li>
                    }
                    @* Only display action link for 'Next Page' when the controller specifies. Include a search string if there is one. *@
                    @if (ViewData["NextPageButtonShown"].ToString() == "True")
                    {
                        <li class="page-item">
                            @Html.ActionLink(">", "Index", new { search = ViewData["SearchString"], page = ViewData["NextPage"] }, new { @class = "page-link" })
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled"><a class="page-link">&gt</a></li>
                    }
                </ul>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Friendly_Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IP_Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Serial_Number)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Model_Number)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MAC_Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Operating_System)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Notes)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date_Purchase)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date_Retire)
                </td>
                <td>
                    <p>
                        @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "btn btn-outline-secondary  btn-margin", @type = "button" })
                        @*@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |*@
                        @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class = "btn btn-outline-danger btn-margin", @type = "button" })
                    </p>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Show page navigation. *@
<ul class="pagination justify-content-end">
    @* Only display action link for 'Previous Page'' when the controller specifies. Include a search string if there is one. *@
    @if (ViewData["LastPageButtonShown"].ToString() == "True")
    {
        <li class="page-item">@Html.ActionLink("Previous", "Index", new { search = ViewData["SearchString"], page = ViewData["LastPage"] }, new { @class = "page-link" })</li>
    }
    else
    {
        <li class="page-item disabled"><a class="page-link">Previous</a></li>
    }
    @* Only display action link for 'Next Page' when the controller specifies. Include a search string if there is one. *@
    @if (ViewData["NextPageButtonShown"].ToString() == "True")
    {
        <li class="page-item">
            @Html.ActionLink("Next", "Index", new { search = ViewData["SearchString"], page = ViewData["NextPage"] }, new { @class = "page-link" })
        </li>
    }
    else
    {
        <li class="page-item disabled"><a class="page-link">Next</a></li>
    }
</ul>